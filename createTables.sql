CREATE TABLE USERS (
	USER_ID				NUMBER			NOT NULL,
	FIRST_NAME			VARCHAR2(100)	NOT NULL,
	LAST_NAME			VARCHAR2(100)	NOT NULL,
	YEAR_OF_BIRTH		INTEGER			,
	MONTH_OF_BIRTH		INTEGER			,
	DAY_OF_BIRTH		INTEGER			,
	GENDER				VARCHAR2(100)	,
	CONSTRAINT USERS_p_key PRIMARY KEY	(USER_ID)
);

-- show errors;

CREATE TABLE FRIENDS (
	USER1_ID			NUMBER			NOT NULL,
	USER2_ID			NUMBER			NOT NULL,
	CONSTRAINT FRIENDS_p_key PRIMARY KEY	(USER1_ID, USER2_ID),
	CONSTRAINT FRIENDS_f1_key FOREIGN KEY	(USER1_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT FRIENDS_f2_key FOREIGN KEY	(USER2_ID) REFERENCES USERS(USER_ID)
);
-- show errors;

CREATE TABLE CITIES (
	CITY_ID 			INTEGER			NOT NULL,
	CITY_NAME			VARCHAR2(100)	,
	STATE_NAME			VARCHAR2(100)	,
	COUNTRY_NAME		VARCHAR2(100)	,
	CONSTRAINT CITIES_p_key PRIMARY KEY	(CITY_ID)
);
-- show errors;
CREATE SEQUENCE CITIES_SEQ START WITH 1;
-- show errors;

CREATE TABLE USER_CURRENT_CITY (
	USER_ID 			NUMBER			NOT NULL,
	CURRENT_CITY_ID		INTEGER			NOT NULL,
	CONSTRAINT USER_CURRENT_CITY_p_key PRIMARY KEY	(USER_ID),
	CONSTRAINT USER_CURRENT_CITY_f1_key FOREIGN KEY	(USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT USER_CURRENT_CITY_f2_key FOREIGN KEY	(CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID)
);
-- show errors;

CREATE TABLE USER_HOMETOWN_CITY (
	USER_ID 			NUMBER			NOT NULL,
	HOMETOWN_CITY_ID 	INTEGER			NOT NULL,
	CONSTRAINT USER_HOMETOWN_CITY_p_key PRIMARY KEY	(USER_ID),
	CONSTRAINT USER_HOMETOWN_CITY_f1_key FOREIGN KEY	(USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT USER_HOMETOWN_CITY_f2_key FOREIGN KEY	(HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID)
);
-- show errors;

CREATE TABLE MESSAGE (
	MESSAGE_ID			INTEGER			NOT NULL,
	SENDER_ID			NUMBER			NOT NULL,
	RECEIVER_ID			NUMBER			NOT NULL,
	MESSAGE_CONTENT		VARCHAR2(2000)	NOT NULL,
	SENT_TIME			TIMESTAMP		NOT NULL,
	CONSTRAINT MESSAGE_p_key PRIMARY KEY	(MESSAGE_ID),
	CONSTRAINT MESSAGE_f1_key FOREIGN KEY	(SENDER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT MESSAGE_f2_key FOREIGN KEY	(RECEIVER_ID) REFERENCES USERS(USER_ID)
);
-- show errors;
CREATE SEQUENCE MESSAGE_SEQ START WITH 1;
-- show errors;

CREATE TABLE PROGRAMS (
	PROGRAM_ID			INTEGER			NOT NULL,
	INSTITUTION			VARCHAR2(100)	,
	CONCENTRATION		VARCHAR2(100)	,
	DEGREE				VARCHAR2(100)	,
	CONSTRAINT PROGRAMS_p_key PRIMARY KEY	(PROGRAM_ID)
);
-- show errors;
CREATE SEQUENCE PROGRAMS_SEQ START WITH 1;
-- show errors;

CREATE TABLE EDUCATION (
	USER_ID 			NUMBER			NOT NULL,
	PROGRAM_ID			INTEGER			NOT NULL,
	PROGRAM_YEAR		INTEGER			,
	CONSTRAINT EDUCATION_p_key PRIMARY KEY	(USER_ID, PROGRAM_ID),
	CONSTRAINT EDUCATION_f1_key FOREIGN KEY	(USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT EDUCATION_f2_key FOREIGN KEY	(PROGRAM_ID) REFERENCES PROGRAMS(PROGRAM_ID)
);
-- show errors;

CREATE TABLE USER_EVENTS (
	EVENT_ID 			NUMBER			NOT NULL,
	EVENT_CREATOR_ID 	NUMBER			NOT NULL,
	EVENT_NAME 			VARCHAR2(100)	NOT NULL,
	EVENT_TAGLINE 		VARCHAR2(100)	,
	EVENT_DESCRIPTION 	VARCHAR2(100)	,
	EVENT_HOST 			VARCHAR2(100)	NOT NULL,
	EVENT_TYPE 			VARCHAR2(100)	NOT NULL,
	EVENT_SUBTYPE 		VARCHAR2(100)	NOT NULL,
	EVENT_LOCATION 		VARCHAR2(100)	,
	EVENT_CITY_ID 		INTEGER			,
	EVENT_START_TIME 	TIMESTAMP		NOT NULL,
	EVENT_END_TIME 		TIMESTAMP		NOT NULL,
	CONSTRAINT USER_EVENTS_p_key PRIMARY KEY	(EVENT_ID),
	CONSTRAINT USER_EVENTS_f1_key FOREIGN KEY	(EVENT_CREATOR_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT USER_EVENTS_f2_key FOREIGN KEY	(EVENT_CITY_ID) REFERENCES CITIES(CITY_ID)
);
-- show errors;

CREATE TABLE PARTICIPANTS (
	EVENT_ID 			NUMBER			NOT NULL,
	USER_ID 			NUMBER			NOT NULL,
	CONFIRMATION		VARCHAR2(100)	NOT NULL,
	CONSTRAINT PARTICIPANTS_p_key PRIMARY KEY	(EVENT_ID, USER_ID),
	CONSTRAINT PARTICIPANTS_f1_key FOREIGN KEY	(USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT PARTICIPANTS_f2_key FOREIGN KEY	(EVENT_ID) REFERENCES USER_EVENTS(EVENT_ID),
	CONSTRAINT PARTICIPANTS_CONFIRMATION_IS CHECK (	(CONFIRMATION = 'ATTENDING') OR
											(CONFIRMATION = 'DECLINED') OR
											(CONFIRMATION = 'UNSURE') OR
											(CONFIRMATION = 'NOT-REPLIED'))
);
-- show errors;

CREATE TABLE ALBUMS (
	ALBUM_ID 			VARCHAR2(100)	NOT NULL,
	ALBUM_OWNER_ID 		NUMBER			NOT NULL,
	ALBUM_NAME 			VARCHAR2(100)	NOT NULL,
	ALBUM_CREATED_TIME	TIMESTAMP		NOT NULL,
	ALBUM_MODIFIED_TIME	TIMESTAMP		NOT NULL,
	ALBUM_LINK			VARCHAR2(2000)	NOT NULL,
	ALBUM_VISIBILITY	VARCHAR2(100)	,
	COVER_PHOTO_ID		VARCHAR2(100)	NOT NULL,
	CONSTRAINT ALBUMS_p_key PRIMARY KEY	(ALBUM_ID),
	CONSTRAINT ALBUMS_f1_key FOREIGN KEY	(ALBUM_OWNER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT ALBUMS_ALBUM_VISIBILITY_IS CHECK (	(ALBUM_VISIBILITY = 'EVERYONE') OR
											(ALBUM_VISIBILITY = 'FRIENDS_OF_FRIENDS') OR
											(ALBUM_VISIBILITY = 'FRIENDS') OR
											(ALBUM_VISIBILITY = 'MYSELF') OR
											(ALBUM_VISIBILITY = 'CUSTOM'))
);
-- show errors;

CREATE TABLE PHOTOS (
	PHOTO_ID 			VARCHAR2(100)	NOT NULL,
	ALBUM_ID 			VARCHAR2(100)	NOT NULL,
	PHOTO_CAPTION		VARCHAR2(2000)	,
	PHOTO_CREATED_TIME	TIMESTAMP		NOT NULL,
	PHOTO_MODIFIED_TIME	TIMESTAMP		NOT NULL,
	PHOTO_LINK			VARCHAR2(2000)	NOT NULL,
	CONSTRAINT PHOTOS_p_key PRIMARY KEY	(PHOTO_ID)
);
-- show errors;

ALTER TABLE ALBUMS ADD CONSTRAINT COVER_PHOTO_ID_IN_PHOTOS FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS INITIALLY DEFERRED DEFERRABLE;
-- show errors;
ALTER TABLE PHOTOS ADD CONSTRAINT ALBUM_ID_EXISTS FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS INITIALLY DEFERRED DEFERRABLE;
-- show errors;

CREATE TABLE TAGS (
	TAG_PHOTO_ID		VARCHAR2(100)	NOT NULL,
	TAG_SUBJECT_ID		NUMBER			NOT NULL,
	TAG_CREATED_TIME	TIMESTAMP		NOT NULL,
	TAG_X				NUMBER			NOT NULL,
	TAG_Y				NUMBER			NOT NULL,
	CONSTRAINT TAGS_p_key PRIMARY KEY	(TAG_PHOTO_ID, TAG_SUBJECT_ID),
	CONSTRAINT TAGS_f1_key FOREIGN KEY	(TAG_SUBJECT_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT TAGS_f2_key FOREIGN KEY	(TAG_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID)
);
-- show errors;

-- CREATE OR REPLACE TRIGGER friendship_unique
-- BEFORE INSERT OR UPDATE ON FRIENDS

-- DECLARE
-- 	FUCKYOU	EXCEPTION;
-- 	TEMP    NUMBER;
-- BEGIN
-- 	SELECT COUNT(*) INTO TEMP FROM FRIENDS WHERE USER1_ID = :NEW.USER1_ID AND USER2_ID = :NEW.USER2_ID;

-- 	IF TEMP > 0 THEN
-- 		ROLLBACK;
-- 		RAISE FUCKYOU;
-- 	END IF;
-- 	SELECT COUNT(*) INTO TEMP FROM FRIENDS WHERE USER1_ID = :NEW.USER2_ID AND USER2_ID = :NEW.USER1_ID;

-- 	IF TEMP > 0 THEN
-- 		ROLLBACK;
-- 		RAISE FUCKYOU;
-- 	END IF;
-- END;
-- CREATE OR REPLACE TRIGGER friendship_unique
-- AFTER INSERT OR UPDATE ON FRIENDS
-- BEGIN
-- 	DELETE FROM FRIENDS F WHERE F.rowid >  ANY (SELECT B.rowid FROM FRIENDS B WHERE F.user1_id = B.user2_id AND F.user2_id = B.user1_id);
-- END;
-- /

CREATE OR REPLACE TRIGGER friendship_unique
BEFORE INSERT OR UPDATE ON FRIENDS
FOR EACH ROW
DECLARE
	temp1 NUMBER;
	temp2 NUMBER;
BEGIN
	SELECT :NEW.USER1_ID INTO temp1 FROM dual;
	SELECT :NEW.USER2_ID INTO temp2 FROM dual;

	SELECT LEAST(temp1, temp2) INTO :NEW.USER1_ID FROM dual;
	SELECT GREATEST(temp1, temp2) INTO :NEW.USER2_ID FROM dual;
END;
/
-- show errors;

CREATE OR REPLACE TRIGGER cities_id_autogenerate
BEFORE INSERT ON CITIES 
FOR EACH ROW

BEGIN
  SELECT CITIES_SEQ.NEXTVAL
  INTO   :NEW.CITY_ID
  FROM   dual;
END;
/
-- show errors;

CREATE OR REPLACE TRIGGER message_id_autogenerate
BEFORE INSERT ON MESSAGE 
FOR EACH ROW

BEGIN
  SELECT MESSAGE_SEQ.NEXTVAL
  INTO   :NEW.MESSAGE_ID
  FROM   dual;
END;
/
-- show errors;

CREATE OR REPLACE TRIGGER programs_id_autogenerate
BEFORE INSERT ON PROGRAMS 
FOR EACH ROW

BEGIN
  SELECT PROGRAMS_SEQ.NEXTVAL
  INTO   :NEW.PROGRAM_ID
  FROM   dual;
END;
/
-- show errors;
